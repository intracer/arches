<!DOCTYPE html>
<!-- this html is included in help-panel-base.htm -->
<div class="ep-help-content">
    <div>
        <a href="javascript:void(0)" class="ep-help-topic-toggle"><h4>Graph Designer Overview</h4></a>
        <div class="ep-help-topic-content">
            <p>The Graph Designer allows you to create, modify, and view the graph for a Resource Model or Branch. You are currently editing a {% if graph.isresource %}Resource Model{% else %}Branch{% endif %}, so note that the Graph Manager functions differently when editing a {% if graph.isresource %}Branch{% else %}Resource Model{% endif %}. See <a href="#differences">below</a> for more information.</p>

            <p>The interface is split into three sections, as shown in the image below.
            <p><img src="/media/img/help/graph-designer-panes.png"></img></p>
            <p>The <strong>Node List</strong> and <strong>Graph</strong> sections both, in their own manner, show every node in this graph. The graph illustrates all nodes and their connections (called "properties"), showing the full branching strucure. Every graph will also have a "top node" in the center, to which all other nodes will be connected. Note that in either of these panes, you can click on a node to select it. This will cause the details for that particular node to show up in the middle panel.</p>
            <p><strong>Node Manager</strong> This is where the action takes place. Within this panel you will be able to build the graph by adding new nodes, or refine it by modifying nodes that already exists. Once you have selected a node, the manager panel will look something like this:</p>
            
            <div class="col-xs-6">
                <p><img src="/media/img/help/node-settings.png" style="border: 2px solid #eee"></img></p>
            </div>
            
            <div class="col-xs-6">
                <p><em>Node Name</em> - Used to identify this node throughout the app interface. For example, at the top of this panel. Names need not be unique across a graph, but it will make everything easier if they are.</p>
                <p><em>CRM Class</em> - (only present if this {% if graph.isresource %}Resource Model{% else %}Branch{% endif %} uses an ontology) This setting defines what ontological class of data will be collected by this node. To learn more, read <a href="https://docs.google.com/document/d/1qOhvpyuUmRv3OFceVsohZfmu2tVHFGIwEBt_pEJF2OI/edit?usp=sharing">Ontologies in Arches</a>.</p>
                <p><em>Relationship from ...</em> - (only present if this {% if graph.isresource %}Resource Model{% else %}Branch{% endif %} uses an ontology) Define what relationship this node has with its parent node (the one directly above it in the graph branch). A verbalization of your choice is shown below this setting.</p>
                <p><em>Data type</em> - Choose what type of data will be collected in this node. Some data types will cause extra settings to appear for further configuration.</p>
                <p><em>Make Card</em> - This setting defines data collection grouping for this node. Read more about what this means in the Cards documentation.</p>
            </div>
        </div>
    </div>

    <div>
        <a href="javascript:void(0)" class="ep-help-topic-toggle"><h4>Editing a Branch's Graph</h4></a>
        <div class="ep-help-topic-content">
            <p>To build the graph of a Branch, your main course of action will be adding nodes, naming them, and defining their data type. If your Branch uses an ontology, you'll also need to define the CRM class and property of each new node. When choosing classes and properties, the interface will automatically enforce preloaded ontological rules.</p>
            <p>Below you can see a simple example of adding a node to a graph.</p>
            <img class="reloadable-img" src="/media/img/help/add-child-branch.gif"></img>
        </div>
    </div>

    <div>
        <a href="javascript:void(0)" class="ep-help-topic-toggle"><h4>Editing a Resouce Model's Graph</h4></a>
        <div class="ep-help-topic-content">
            <p>When editing a Resource Model, you will not be adding individual nodes to the graph, but entire Branches. This encourages consistency between Resource Models by allowing you to reuse a single Branch many times.</p>
            <p>As shown below, you must select the top node and then use <i class="ion-ios-plus"></i> to add a Branch. Once you have added a Branch, you may fine-tune the settings of its descendant nodes if desired. Note that any changes you make here will not be applied back to the original Branch.</p>
            <img class="reloadable-img" src="/media/img/help/add-graph-branch.gif"></img>
        </div>
    </div>

    <div>
        <a href="javascript:void(0)" class="ep-help-topic-toggle"><h4>About Data Types</h4></a>
        <div class="ep-help-topic-content">
            <p>Choosing a node's <em>Data Type</em> is the first step toward defining how that information will be collected. A few data types are intuitive ('string', 'number', 'date'), but here's an explanation for the less familiar types.</p>
            <ul>
                <li><em>geojson-feature-collection</em> - Stores geographic coordinates, and is used to show a resource on the map.</li>
                <li><em>concept</em> - Choosing 'concept' allows this node to participate in your system-wide controlled vocabulary. You'll further be prompted to choose a <em>Concept Collection</em>, where you'll select a predefined set of concepts that the user will choose from. Think of this as choosing from a predefined set of dropdown menus. Concepts and concept collections are managed in the Reference Data Manager (RDM).</li>
                <li><em>concept-list</em> - Same as above, but the user will be able to select multiple concepts.</li>
                <li><em>domain-value</em> - Like 'concept', choose this to present the user with a dropdown menu. Unlike 'concept' this dropdown menu will not come from your system-wide controlled vocubulary, but from a list of values that you define here.</li>
                <li><em>domain-value-list</em> - Same as above, but the user will be able to select multiple domain-values.</li>
                <li><em>boolean</em> - Use this to record a simple "yes or no" or "true or false" value.</li>
                <li><em>file-list</em> - Allows this node to store one or mores files. Use this to upload images, documents, etc.</li>
                <li><em>semantic</em> - A 'semantic' node <strong>does not store data</strong>. Semantic nodes are used where necessary to make symbolic connections between nodes, generally in order to follow ontoligical rules. Note that the top node of <em>every</em> graph is a semantic node.</li>
            </ul>
        </div>
    </div>
</div>

